Node-js Def:
============

Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. 
Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.

Node.js = Runtime Environment + JavaScript Library

Installation Details:
=====================

Node.js was installed at /usr/local/bin/node

npm was installed at /usr/local/bin/npm

Make sure that /usr/local/bin is in your $PATH.

A Node.js application consists of the following three important components:
============================================================================

Import required modules − We use the "require" directive to load Node.js modules. (same like import in java)

Create server − A server which will listen to client's requests similar to Apache HTTP Server.

Read request and return response − The server created in an earlier step will read the HTTP request made by the client which can be a browser or a console and return the response.

REPL:
=====
REPL stands for Read Eval Print Loop and it represents a computer environment like a Windows console or Unix/Linux shell where a command is entered and the system responds with an output in an interactive mode. 

Node.js or Node comes bundled with a REPL environment.
The REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.

Starting REPL:
==============
REPL can be started by simply running node on shell/console without any arguments as follows.

$ node

Node Package Manager (NPM):
===========================

Node Package Manager (NPM) provides two main functionalities:

Online repositories for node.js packages/modules which are searchable on search.nodejs.org

Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.

NPM comes bundled with Node.js installables after v0.6.3 version. To verify the same, open console and type the following command and see the result −

$ npm --version
3.10.8

Installing Modules using NPM:
=============================
$ npm install <Module Name>

For example, following is the command to install a famous Node.js web framework module called express.

$ npm install express

Now you can use this module in your js file as following:

var express = require('express');

Installing modules globally:
============================
$ sudo npm install express -g
/usr/local/lib
ls -lrt
total 0
drwxrwxr-x  25 root    wheel                    850 Oct 20 03:22 npm
drwxr-xr-x   9 nobody  HOMEOFFICE\Domain Users  306 Nov 30 16:21 express

Command to check all the modules installed globally:
=====================================================
$ npm ls -g

Uninstalling a Module:
======================
Use the following command to uninstall a Node.js module.

$ npm uninstall express

Once NPM uninstalls the package, you can verify it by looking at the content of /node_modules/ directory or type the following command −

$ npm ls

Updating a Module:
===================
Update package.json and change the version of the dependency to be updated and run the following command.

$ npm update express

Search a Module:
================

Search a package name using NPM.

$ npm search express

Event Emitter:
==============
All objects which emit events are the instances of events.EventEmitter.

EventEmitter provides multiple properties like on and emit. on property is used to bind a function with the event and emit is used to fire an event

By default, EventEmitters will print a warning if more than 10 listeners are added for a particular event.
It can be changed by using setMaxListeners(n).

ex: event-handler.js and multiple-handlers.js

Buffers:
========

Node provides Buffer class which provides instances to store raw data similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.

Buffer class is a global class that can be accessed in an application without importing the buffer module.

ex: buffer/buffer-*.js

Strems:
=======

Streams are objects that let you read data from a source or write data to a destination in continuous fashion. 
In Node.js, there are four types of streams:
--------------------------------------------

Readable − Stream which is used for read operation.

Writable − Stream which is used for write operation.

Duplex − Stream which can be used for both read and write operation.

Transform − A type of duplex stream where the output is computed based on input.

Each type of Stream is an EventEmitter instance and throws several events at different instance of times. 

For example, some of the commonly used events are:
--------------------------------------------------

data − This event is fired when there is data is available to read.

end − This event is fired when there is no more data to read.

error − This event is fired when there is any error receiving or writing data.

finish − This event is fired when all the data has been flushed to underlying system

example : stream-read.js and stream-write.js

Piping the Streams:
===================
Piping is a mechanism where we provide the output of one stream as the input to another stream.
There is no limit on the piping operations.

ex: stream-pipe.js

Chaining the Streams:
=====================
Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations.
It is normally used with piping operations. 
Now we'll use piping and chaining to first compress a file and then decompress the same.

example : stream-compress.js and stream-decompress.js


File System:
============

The Node File System (fs) module can be imported using the following syntax:
$ var fs = require("fs")

Synchronous vs Asynchronous:
----------------------------
Every method in the fs module has synchronous as well as asynchronous forms. 
(*)Asynchronous methods take the last parameter as the completion function callback and the first parameter of the callback function as error. 
It is better to use an asynchronous method instead of a synchronous method, as the former never blocks a program during its execution, whereas the second one does.

Get File Information:
---------------------
Following is the syntax of the method to get the information about a file:
$ fs.stat(path, callback)

Parameters:
-----------
path     − This is the string having file name including path.
callback − This is the callback function which gets two arguments (err, stats) where stats is an object of "fs.Stats" type.

example: file-info.js, file-read.js, file-write.js, asyn-read.js

Closing a File:
---------------
Syntax:
$ fs.close(fd, callback)

Parameters: 
fd       − This is the file descriptor returned by file "fs.open()" method.
callback − This is the callback function. No arguments other than a possible exception are given to the completion callback.

example: file-close.js

Truncate a File:
----------------
Syntax:
$ fs.ftruncate(fd, len, callback)

Parameters:
fd       − This is the file descriptor returned by fs.open().
len      − This is the length of the file after which the file will be truncated.
callback − This is the callback function. No arguments other than a possible exception are given to the completion callback

example: file-trunc.js

Delete a File:
--------------
Syntax:
$ fs.unlink(path, callback)

Parameters:
path     − This is the file name including path.
callback − This is the callback function No arguments other than a possible exception are given to the completion callback.

example: file-del.js

Create a Directory:
-------------------
Syntax:
fs.mkdir(path[, mode], callback)

Parameters:
path     − This is the directory name including path.
mode     − This is the directory permission to be set. Defaults to 0777.
callback − This is the callback function. No arguments other than a possible exception are given to the completion callback.

example: fs-create-dir.js

Read a Directory:
-----------------
Syntax:
$ fs.readdir(path, callback)

Parameters:
path     − This is the directory name including path.
callback − This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.

example: fs-read-dir.js

Remove a Directory:
-------------------
Syntax:
$ fs.rmdir(path, callback)

Parameters:
path     − This is the directory name including path.
callback − This is the callback function. No arguments other than a possible exception are given to the completion callback.

example: fs-del-dir.js

Methods Reference:
==================

There are many methods() available in node.js apart from the above methods.
For a brief list of all methods:
https://www.tutorialspoint.com/nodejs/nodejs_file_system.htm

 